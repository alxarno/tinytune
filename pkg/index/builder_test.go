package index

import (
	"context"
	"encoding/base64"
	"os"
	"path/filepath"
	"strings"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestIndexBuilder(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	indexFile, err := os.Open("../../test/test.index.tinytune")
	require.NoError(err)
	index, err := NewIndex(context.Background(), indexFile)
	require.NoError(err)
	require.Len(index.meta, 17)
	sample, ok := index.meta["005f6b0265"]
	require.True(ok)
	require.True(sample.IsVideo())
	require.Equal("sample_960x400_ocean_with_audio.flv", sample.Name)
	require.Equal(960, sample.Resolution.Width)
	require.Equal(400, sample.Resolution.Height)
	require.EqualValues(37038, sample.Preview.Length)
	require.EqualValues(87368, sample.Preview.Offset)
	require.EqualValues(7222114, sample.OriginSize)
	require.LessOrEqual(sample.Preview.Offset+sample.Preview.Length, uint32(len(index.data)))
}

func TestIndexBuilderClearRemovedFiles(t *testing.T) {
	t.Parallel()

	testFolderPath, _ := strings.CutSuffix(os.Getenv("PWD"), "pkg/index")
	testFolderPath = filepath.Join(testFolderPath, "test")

	require := require.New(t)
	indexFile, err := os.Open("../../test/test.index.tinytune")
	require.NoError(err)

	filesPaths := []string{
		// removed item
		// "sample_minions.gif",
		"test.m3u8",
		"sample.txt",
		"2.ts",
		"video/sample_960x400_ocean_with_audio.flv",
		"image.jpg",
		"img/nested/nested-image.jpg",
		"img",
		"video/sample.mp4",
		"video",
		"Anh_nude_cover.webp",
		"test.index.tinytune",
		"img/nested",
		"long-name-sample-for-testing-names-displaying-1111122223333.txt",
		"img/image.jpg",
		"short.mp4",
		"sample.mp4",
	}

	filesMeta := []FileMeta{}

	for _, path := range filesPaths {
		path = filepath.Join(testFolderPath, path)
		stat, err := os.Stat(path)
		require.NoError(err)
		relativePath, err := filepath.Rel(testFolderPath, path)
		require.NoError(err)

		file := &mockFile{
			FileInfo:     stat,
			path:         path,
			relativePath: relativePath,
			dir:          stat.IsDir(),
			modTime:      stat.ModTime(),
		}
		filesMeta = append(filesMeta, file)
	}

	index, err := NewIndex(
		context.Background(),
		indexFile,
		WithFiles(filesMeta),
		WithRemovedFilesCleaning(),
	)
	require.NoError(err)
	require.Len(index.meta, len(filesPaths))

	dataPartLength := 483054
	removedPreviewLength := 15322
	// image.jpg file has 66002 (offset) 8620 (length)
	// will test preview
	itemNextRemoved := "024eb2ebdb"

	//nolint:lll
	itemNextPreviewData := ""
	preview, err := index.PullPreview(ID(itemNextRemoved))
	require.NoError(err)
	require.Equal(base64.StdEncoding.EncodeToString(preview), itemNextPreviewData)
	require.Len(index.data, dataPartLength-removedPreviewLength)
}
